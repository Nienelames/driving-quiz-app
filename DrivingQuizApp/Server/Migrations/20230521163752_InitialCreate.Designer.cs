// <auto-generated />
using System;
using DrivingQuizApp.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrivingQuizApp.Server.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20230521163752_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0-preview.4.23259.3");

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.Explanation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Explanations");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExplanationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ExplanationId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.Rule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RuleReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RuleReferenceId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.RuleReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Chapter")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("RuleReferences");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PermissionsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.UserAnswerStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnswerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsecutiveCorrectCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CorrectCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IncorrectCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.ToTable("UserAnswerStats");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanAccessApp")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanGrantAccessToApp")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.UserQuestionBookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuestionBookmarks");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.UserQuiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTaken")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuizzes");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.UserQuizAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnswerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMarked")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserQuizQuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("UserQuizQuestionId");

                    b.ToTable("UserQuizAnswers");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.UserQuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserQuizId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserQuizId");

                    b.ToTable("UserQuizQuestions");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.Answer", b =>
                {
                    b.HasOne("DrivingQuizApp.Server.Entities.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.Question", b =>
                {
                    b.HasOne("DrivingQuizApp.Server.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingQuizApp.Server.Entities.Explanation", "Explanation")
                        .WithMany()
                        .HasForeignKey("ExplanationId");

                    b.Navigation("Category");

                    b.Navigation("Explanation");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.Rule", b =>
                {
                    b.HasOne("DrivingQuizApp.Server.Entities.RuleReference", "RuleReference")
                        .WithMany()
                        .HasForeignKey("RuleReferenceId");

                    b.Navigation("RuleReference");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.User", b =>
                {
                    b.HasOne("DrivingQuizApp.Server.Entities.UserPermission", "Permissions")
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.UserAnswerStat", b =>
                {
                    b.HasOne("DrivingQuizApp.Server.Entities.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.UserQuestionBookmark", b =>
                {
                    b.HasOne("DrivingQuizApp.Server.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingQuizApp.Server.Entities.User", null)
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.UserQuiz", b =>
                {
                    b.HasOne("DrivingQuizApp.Server.Entities.User", null)
                        .WithMany("Quizzes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.UserQuizAnswer", b =>
                {
                    b.HasOne("DrivingQuizApp.Server.Entities.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingQuizApp.Server.Entities.UserQuizQuestion", null)
                        .WithMany("Answers")
                        .HasForeignKey("UserQuizQuestionId");

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.UserQuizQuestion", b =>
                {
                    b.HasOne("DrivingQuizApp.Server.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingQuizApp.Server.Entities.UserQuiz", null)
                        .WithMany("Questions")
                        .HasForeignKey("UserQuizId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.User", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.UserQuiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DrivingQuizApp.Server.Entities.UserQuizQuestion", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
